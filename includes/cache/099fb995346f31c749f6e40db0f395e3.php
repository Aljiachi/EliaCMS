PCFET0NUWVBFIGh0bWw+DQ==
PGh0bWw+DQ==
PGhlYWQ+DQ==
PG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiIC8+DQ==
PHRpdGxlPtin2YTZg9mB2YrZhCDZhNil2K/Yp9ix2Kkg2KfZhNmF2K3YqtmI2Yk8L3RpdGxlPg0=
PGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cDovL2xvY2FsaG9zdC9hbGthZmVlbENtcy90aGVtZXMvZGVmYXVsdC9zdHlsZS5jc3MiIC8+DQ==
PD8gaWYoIWVtcHR5KCR0aGVtZSkpeyA/Pg0=
PGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cDovL2xvY2FsaG9zdC9hbGthZmVlbENtcy97dGhlbWV9IiAvPg0=
PD8gfSA/Pg0=
PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cDovL2xvY2FsaG9zdC9hbGthZmVlbENtcy9qc2NyaXB0L2pxdWVyeS5qcyI+PC9zY3JpcHQ+DQ==
PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cDovL2xvY2FsaG9zdC9hbGthZmVlbENtcy9qc2NyaXB0L3NoYXJlLmpzIj48L3NjcmlwdD4N
PCEtLSBEb250IFJlbW92ZSAtLT4N
DQ==
PCEtLSBEb250IFJlbW92ZSAtLT4N
PC9oZWFkPg0=
DQ==
PGJvZHk+DQ==
ICAgIA0=
PGRpdiBpZD0iZG9jdW1lbnQiPg0=
DQ==
PGRpdiBpZD0iZGl2c2l6ZSI+DQ==
CTxkaXYgaWQ9ImhlYWRlciI+DQ==
ICAgIAk8SDEgc3R5bGU9Im1hcmdpbjowcHg7Ij7Yp9mE2YPZgdmK2YQg2YTYpdiv2KfYsdipINin2YTZhdit2KrZiNmJPC9IMT4N
ICAgIDwvZGl2Pg0=
ICAgIA0=
PGRpdiBpZD0iaGVhZGJhciI+DQ==
DQ==
CTxkaXYgaWQ9ImRpdnNpemUiPg0=
ICAgICAgICAgIDx1bD4N
ICAgICAgICAgICAgPGxpPjxhIGhyZWY9ImluZGV4LnBocCI+2KfZhNi12YHYrdipINin2YTYsdim2YrYs9ipPC9hPjwvbGk+DQ==
CSAgICA8bGk+PGEgaHJlZj0iaW5kZXgucGhwIj7Ypdiq2LXZhCDYqNmG2Kc8L2E+PC9saT4N
CSAgPC91bD4N
CTwvZGl2Pg0=
ICAgICAgICAN
IDwvZGl2Pg0=
ICAgIA0=
PC9kaXY+DQ==
DQ==
PGRpdiBpZD0icGFnZSI+
